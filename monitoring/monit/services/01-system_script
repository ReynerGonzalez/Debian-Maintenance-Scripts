#!/bin/bash
#
# List your server's resources.
#
# VERSION       :1.1.0
# DATE          :2018-08-24
# AUTHOR        :Viktor Szépe <viktor@szepe.net>
# LICENSE       :The MIT License (MIT)
# URL           :https://github.com/szepeviktor/debian-server-tools
# BASH-VERSION  :4.2+
# DEPENDS       :apt-get install usbutils bind9-host dnsutils
# LOCATION      :/usr/local/sbin/server-integrity.sh

# Checks
# - CPU
# - memory
# - disks
# - swap
# - clock source
# - entropy
# - virtual console
# - gateway
# - IP address
# - nameserver
# - nearest hop
# - reverse record
# - MX record
# - Resolvers
# - Filesystem root

Disk_partitions()
{
    local VDISK

    # OpenVZ: no disk devices, empty string (but not on CloudLinux)
    # OpenVZ states in /proc/self/status
    #     envID == 0 -> openvzhn https://openvz.org/Hardware_Node
    #     envID present but > 0 -> openvzve https://openvz.org/Container
    if [ -f /proc/vz/vzquota ] && [ ! -f /proc/lve/list ]; then
        echo ""
        return 0
    fi

    # Physical /dev/[sh]d?
    # VMware /dev/sd?
    # XEN /dev/xvd?
    # KVM dev/vd?
    for VDISK in hd sd xvd vd; do
        if [ -n "$(find /dev/ -type b -name "${VDISK}?")" ]; then
            find /dev/ -type b -name "${VDISK}?" | sort | paste -s -d ":"
            return 0
        fi
    done

    return 1
}

Check_resolver()
{
    local RESOLVER="$1"
    local NAME="$2"
    local TYPE="$3"
    local TIMEOUT="$4"
    local OUTPUT
    local STATUS
    local SED_EXP
    local VALUE

    # 1×2 seconds timeout
    if OUTPUT="$(dig @"$RESOLVER" "$NAME" "$TYPE" IN +tries=1 +time="$TIMEOUT" +recurse 2>&1)"; then
        # https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-6
        STATUS="$(sed -n -e 's/^;; ->>HEADER<<- opcode: \S\+, status: \([A-Z]\+\), id: .\+$/\1/p' <<<"$OUTPUT")"
        if [ -z "$STATUS" ]; then
            STATUS="UNKNOWN"
        fi
    elif [ "$?" == 9 ]; then
        STATUS="CONNERR"
        # Timeout is identical to connection error as UDP is used
        # Check once again with long timeout
        if [ "$TIMEOUT" != 8 ] && Check_resolver "$RESOLVER" "$NAME" "$TYPE" 8 >/dev/null; then
            # OK response with long timeout
            STATUS="TIMEOUT"
        fi
    else
        STATUS="ERROR${?}"
    fi

    # Not OK response
    if [ "$STATUS" != NOERROR ]; then
        echo "$STATUS"
        return 1
    fi

    # First record's value
    # Only \t and \1 should be escaped
    printf -v SED_EXP '/^;; ANSWER SECTION:$/{n;s/^\S\+\\t\+[0-9]\+\\t\+IN\\t\+%s\\t\+\(\S\+\)$/\\1/p;q}' "$TYPE"
    VALUE="$(sed -n -e "$SED_EXP" <<<"$OUTPUT")"

    # Missing answer
    if [ -z "$VALUE" ]; then
        echo "NOANSWER"
        return 2
    fi

    # OK
    echo "$VALUE"
}

set -e

while getopts ":c:h:r:" OPT; do
    case "$OPT" in
        c)
            CHECK="$OPTARG"
            ;;
        h)
            # Nearest host for HOP1/2
            NEAREST="$OPTARG"
            ;;
        r)
            # Expected result
            EXPECTED="$OPTARG"
            ;;
        *)
            # Incorrect usage
            exit 6
            ;;
    esac
done

shift "$((OPTIND - 1))"

# Stray option
test -z "$*" || exit 7

case "$CHECK" in
    CPU)
        RESULT="$(grep -c '^processor\b' /proc/cpuinfo)"
        ;;
    RAM)
        RAM_KB="$(sed -n -e 's#^MemTotal:\s\+\(\S\+\).*$#\1#p' /proc/meminfo)"
        RESULT="$((RAM_KB / 1024))"
        ;;
    PCI)
        test -d /sys/bus/pci || exit 10
        RESULT="$(lspci -n | md5sum | cut -d " " -f 1)"
        ;;
    USB)
        test -d /sys/bus/usb || exit 10
        RESULT="$(lsusb | cut -d " " -f 1-6 | md5sum | cut -d " " -f 1)"
        ;;
    DISK)
        RESULT="$(Disk_partitions)" || exit 10
        ;;
    SWAP)
        RESULT="$(sed -e '1d;s#^\(\S\+\s\+\)\{2\}\(\S\+\).*$#\2#' /proc/swaps | sort | paste -s -d ":")"
        ;;
    CLOCKSOURCE)
        RESULT="$(cat /sys/devices/system/clocksource/clocksource0/current_clocksource)"
        ;;
    ENTROPY)
        # Visualize available entropy
        # while :;do ENTR=$(cat /proc/sys/kernel/random/entropy_avail);printf -v BAR '%*s' $((ENTR/25));echo ${BAR// /_} $ENTR;sleep 10;done
        declare -i ENTROPY
        ENTROPY="$(cat /proc/sys/kernel/random/entropy_avail)"
        if [ "$ENTROPY" -ge 1000 ]; then
            RESULT="min1000"
        else
            RESULT="insufficient (${ENTROPY})"
        fi
        ;;
    VCONSOLE)
        test -c /dev/hvc0 || exit 10
        RESULT="/dev/hvc0"
        ;;
    GATEWAY)
        # @FIXME "default dev venet0  scope link" if grep '^default dev [[:alnum:]]\+ '; then grep \1
        RESULT="$(ip route | grep '^default via ' | cut -d " " -f 3)"
        ;;
    IP1)
        RESULT="$(ip addr show | sed -n -e 's#^\s*inet \([0-9\.]\+\)\b.*$#\1#p' | grep -v -x -m 1 '127\.[0-9]\+\.[0-9]\+\.[0-9]\+')"
        ;;
    DNS1)
        RESULT="$(sed -n -e '0,/^nameserver \([0-9.]\+\)\s*$/s##\1#p' /etc/resolv.conf)"
        ;;
    HOP1)
        test -z "$NEAREST" && exit 8
        RESULT="$(traceroute -n -4 -w 2 -m 1 "$NEAREST" | sed -n -e '$s#^ 1  \([0-9.]\+\) .*$#\1#p')"
        if [ -n "$EXPECTED" ]; then
            # Brace expansion for load-balanced routers
            for ROUTER in $(eval echo "$EXPECTED"); do
                if [ "$ROUTER" == "$RESULT" ]; then
                    EXPECTED="$ROUTER"
                    break
                fi
            done
        fi
        ;;
    HOP2)
        test -z "$NEAREST" && exit 8
        RESULT="$(traceroute -n -4 -w 2 -f 2 -m 2 "$NEAREST" | sed -n -e '$s#^ 2  \([0-9.]\+\) .*$#\1#p')"
        ;;
    PTR1)
        IP="$("$0" -c IP1)"
        RESULT="$(host -W 2 -t PTR "$IP" | sed -n -e '0,/^[0-9.]\+\.in-addr\.arpa domain name pointer \(.\+\)$/s##\1#p')"
        ;;
    MX1)
        MX1="$(host -W 2 -t MX "$(hostname -f)")"
        test "$MX1" == "${MX1/ mail is handled by /}" && exit 10
        RESULT="$(echo "$MX1" | sed -n -e '0,/^.* mail is handled by [0-9]\+ \(\S\+\).*$/s//\1/p')"
        ;;
    RES)
        # Visualize longer resolver response times
        #     MSEC_DELAY=2 msec host -tPTR 1.1.1.1 $RESOLVER|grep -v --line-buffered '^   [6-9]------'|ts
        # Responding resolver count
        declare -i RESULT
        RESOLVERS="$(sed -n -e 's/^nameserver\s\+\(\S\+\)\s*$/\1/p' /etc/resolv.conf)"
        while read -r RESOLVER; do
            # Same timeout as "options timeout:2" in resolv.conf
            if HOST_NAME="$(Check_resolver "$RESOLVER" 1.1.1.1.in-addr.arpa. PTR 2)" \
                && [ "$HOST_NAME" == one.one.one.one. ]; then
                RESULT+="1"
            else
                # Show failing resolver
                printf 'R;%s;%s; ' "$RESOLVER" "$HOST_NAME"
            fi
        done <<<"$RESOLVERS"
        ;;
    ROOT)
        RESULT="$(find / -mindepth 1 -maxdepth 1 -printf '%P\n' | sort | paste -s -d ":")"
        ;;
    *)
        # Missing check
        exit 11
        ;;
esac

echo "$RESULT"

# We need to check the result
if [ -n "${EXPECTED+empty}" ]; then
    # Expected value is set and empty
    if [ "$EXPECTED" == empty ]; then
        EXPECTED=""
    fi
    test "$EXPECTED" == "$RESULT"
fi

# Test: sed -ne 's#^\s*\([A-Z0-9]\+\)).*#\1#p' ./01-system_script|xargs -I% bash -- ./01-system_script -c % -h 1.1.1.1
# Test: sed -ne 's#^\s*\([A-Z0-9]\+\)).*#\1#p' server-integrity.sh|xargs -I% server-integrity.sh -c % -h 1.1.1.1
