#!/bin/bash
#
# Resolve a IPv4 address or a hostname vice-versa.
#
# VERSION       :0.3.0
# DATE          :2016-05-04
# AUTHOR        :Viktor Sz√©pe <viktor@szepe.net>
# LICENSE       :The MIT License (MIT)
# URL           :https://github.com/szepeviktor/debian-server-tools
# BASH-VERSION  :4.2+
# DEPENDS       :apt-get install host
# LOCATION      :/usr/local/bin/hosthost

# Usage
#
# PTR -> last A -> last PTR
#     hosthost HOSTNAME
#     hosthost -v HOSTNAME
#
# A -> last PTR -> last A
#     hosthost IP
#     hosthost -v IP

ARG="$1"

Error() {
    local RET="$1"

    shift
    echo -e "ERROR: $*" 1>&2

    exit "$RET"
}

# Detect an IPv4 address
Is_ipv4() {
    local TOBEIP="$1"
    #             0-9, 10-99, 100-199,  200-249,    250-255
    local OCTET="([1-9]?[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])"

    [[ "$TOBEIP" =~ ^${OCTET}\.${OCTET}\.${OCTET}\.${OCTET}$ ]]
}

Dnsquery() {
    # Dnsquery() ver 1.5.0
    # error 1:  Empty host/IP
    # error 2:  Invalid answer
    # error 3:  Invalid query type
    # error 4:  Not found

    local TYPE="$1"
    local HOST="$2"
    local RR_SORT
    local IP
    local ANSWER
    local IP_REGEX='^([0-9]{1,3}\.){3}[0-9]{1,3}$'
    local HOST_REGEX='^[a-z0-9A-Z.-]+$'

    # Empty host/IP
    [ -z "$HOST" ] && return 1

    # Sort MX records
    if [ "$TYPE" == "MX" ]; then
        RR_SORT="sort -k 6 -n -r"
    else
        RR_SORT="cat"
    fi

    # Last record only, first may be a CNAME
    IP="$(LC_ALL=C host -W 2 -t "$TYPE" "$HOST" 2> /dev/null | ${RR_SORT} | tail -n 1)"

    # Not found
    if [ -z "$IP" ] || [ "$IP" != "${IP/ not found:/}" ] || [ "$IP" != "${IP/ has no /}" ]; then
        return 4
    fi

    case "$TYPE" in
        A)
            ANSWER="${IP#* has address }"
            ANSWER="${ANSWER#* has IPv4 address }"
            if grep -qE "$IP_REGEX" <<< "$ANSWER"; then
                echo "$ANSWER"
            else
                # Invalid IP
                return 2
            fi
        ;;
        MX)
            ANSWER="${IP#* mail is handled by *[0-9] }"
            if grep -qE "$HOST_REGEX" <<< "$ANSWER"; then
                echo "$ANSWER"
            else
                # Invalid mail exchanger
                return 2
            fi
        ;;
        PTR)
            ANSWER="${IP#* domain name pointer }"
            ANSWER="${ANSWER#* points to }"
            if grep -qE "$HOST_REGEX" <<< "$ANSWER"; then
                echo "$ANSWER"
            else
                # Invalid hostname
                return 2
            fi
        ;;
        TXT)
            ANSWER="${IP#* descriptive text }"
            ANSWER="${ANSWER#* description is }"
            if grep -qE "$HOST_REGEX" <<< "$ANSWER"; then
                echo "$ANSWER"
            else
                # Invalid descriptive text
                return 2
            fi
        ;;
        *)
            # Unknown type
            return 3
        ;;
    esac
    return 0
}

Ptr_a_ptr() {
    local PTR="$1"
    local A

    if A="$(Dnsquery A "$PTR")"; then
        [ "$VERBOSE" == 1 ] && echo "$A"
        if ! Dnsquery PTR "$A"; then
            Error 11 "No PTR record for ${A}"
        fi
    else
        Error 10 "No A record for ${PTR}"
    fi
}

A_ptr_a() {
    local A="$1"
    local PTR

    if PTR="$(Dnsquery PTR "$A")"; then
        [ "$VERBOSE" == 1 ] && echo "$PTR"
        if ! Dnsquery A "$PTR"; then
            Error 21 "No A record for ${PTR}"
        fi
    else
        Error 20 "No PTR record for ${A}"
    fi
}

which host &> /dev/null || Error 99 "Host command not found"

if [ "$ARG" == "-v" ]; then
    VERBOSE="1"
    ARG="$2"
else
    VERBOSE="0"
fi
[ -z "$ARG" ] && Error 1 "Invalid argument"

if Is_ipv4 "$ARG"; then
    A_ptr_a "$ARG"
else
    Ptr_a_ptr "$ARG"
fi
